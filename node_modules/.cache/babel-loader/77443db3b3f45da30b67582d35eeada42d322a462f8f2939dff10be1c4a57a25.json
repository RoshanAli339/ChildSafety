{"ast":null,"code":"import NavBar from\"./NavBar\";import{pin}from\"../data/location\";import'./History.css';// function to calculate the distance between two points given latitude and longitude\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function calculateProximity(location){const center={latitude:16.255168643233784,longitude:80.32518364053286};const r=6371;// radius of earth in KM\nconst p=Math.PI/180;const lat1=center.latitude*p;const long1=center.longitude*p;const lat2=location.latitude*p;const long2=location.longitude*p;const dlat=lat2-lat1;const dlong=long2-long1;const a=Math.sin(dlat/2)**2+Math.cos(lat1)*Math.cos(lat2)*Math.sin(dlong/2)**2;const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return Math.round(r*c*1000);}export default function History(){pin.reverse();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(NavBar,{}),/*#__PURE__*/_jsx(\"div\",{className:\"table-container\",children:/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{className:\"theader\",children:[/*#__PURE__*/_jsx(\"th\",{children:\"S.No.\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Date & Time\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Latitude\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Longitude\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Maps\"}),/*#__PURE__*/_jsx(\"th\",{children:\"In Proximity\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:pin.map((day,index)=>{let inProximity=calculateProximity(day)<5000;return/*#__PURE__*/_jsxs(\"tr\",{className:!inProximity&&\"outProximity\",children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:day.date}),/*#__PURE__*/_jsx(\"td\",{children:day.latitude}),/*#__PURE__*/_jsx(\"td\",{children:day.longitude}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"a\",{href:\"https://www.google.com/maps/@\"+day.latitude+\",\"+day.longitude+\",18z?entry=ttu\",children:\"Google Maps\"})}),/*#__PURE__*/_jsx(\"td\",{children:inProximity?\"Yes\":\"No\"})]},index);})})]})})]});}","map":{"version":3,"names":["NavBar","pin","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","calculateProximity","location","center","latitude","longitude","r","p","Math","PI","lat1","long1","lat2","long2","dlat","dlong","a","sin","cos","c","atan2","sqrt","round","History","reverse","children","className","map","day","index","inProximity","date","href"],"sources":["/home/cyberknight/ChildSafety/src/components/History.js"],"sourcesContent":["import NavBar from \"./NavBar\";\nimport {pin} from \"../data/location\"\nimport './History.css'\n\n// function to calculate the distance between two points given latitude and longitude\nfunction calculateProximity(location){\n    const center = {\n        latitude: 16.255168643233784,\n        longitude: 80.32518364053286\n    }\n    const r = 6371; // radius of earth in KM\n    const p = Math.PI / 180;\n    const lat1 = center.latitude * p;\n    const long1 = center.longitude * p;\n    const lat2 = location.latitude * p;\n    const long2 = location.longitude * p;\n\n    const dlat = lat2 - lat1\n    const dlong = long2 - long1\n\n    const a = Math.sin(dlat/2) ** 2 + Math.cos(lat1) * Math.cos(lat2) *\n                    Math.sin(dlong / 2) ** 2\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n\n    return Math.round((r * c) * 1000);\n}\n\nexport default function History(){\n    pin.reverse()\n\n    return (\n        <>\n            <NavBar/>\n            <div className=\"table-container\">\n                <table>\n                    <thead>\n                        <tr className=\"theader\">\n                            <th>S.No.</th>\n                            <th>Date & Time</th>\n                            <th>Latitude</th>\n                            <th>Longitude</th>\n                            <th>Maps</th>\n                            <th>In Proximity</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {pin.map((day, index) => {\n                            let inProximity = calculateProximity(day) < 5000\n                            return (\n                                <tr key={index} className={!inProximity && \"outProximity\"}>\n                                    <td>{index+1}</td>\n                                    <td>{day.date}</td>\n                                    <td>{day.latitude}</td>\n                                    <td>{day.longitude}</td>\n                                    <td><a href={\"https://www.google.com/maps/@\"+day.latitude+\",\"+\n                                        day.longitude+\",18z?entry=ttu\"}>\n                                        Google Maps\n                                        </a>\n                                    </td>\n                                    <td>{inProximity?\"Yes\":\"No\"}</td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}